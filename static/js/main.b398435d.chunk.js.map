{"version":3,"sources":["useDropDown.js","Pet.js","Result.js","searchParams.js","Carousel.js","Details.js","App.js","serviceWorker.js","index.js"],"names":["useDropDown","label","defaultState","options","useState","state","updateState","id","replace","toLowerCase","htmlFor","value","onChange","e","target","map","op","key","Pet","props","name","animal","breed","media","location","length","small","Result","pets","pet","type","breeds","primary","photos","contact","address","city","SearchParam","updateLocation","updateBreeds","ANIMALS","AnimalDropDown","BreedDropDown","setpets","a","animals","useEffect","then","breedString","console","error","className","onSubmit","preventDefault","requestPets","Carousel","photo","active","handleIndexClick","event","setState","dataset","index","this","log","src","alt","onClick","data-index","large","React","Component","Details","loading","description","catch","err","App","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b398435d.chunk.js","sourcesContent":["import React,{useState} from \"react\"\n// //working for anime only using useState \n// var ANIME=[\"One Piece\",\"Bleach\",\"Naruto\",\"One Punch Man\"];\n// const DropDown=()=>{\n//     const [anime,updateAnime]=useState(\"\");\n//     return(\n//         <select id=\"anime\" value={anime} \n//         onChange={e=>updateAnime(e.target.value)}\n//         onblur={e=>updateAnime(e.target.value)}\n//         >\n//             <option />\n//         {\n//             ANIME.map(ani=>(\n//                 <option key={ani} value={ani}>{ani}</option>\n//             ))\n//         }\n//         </select>\n        \n//     )\n// }\n// const App=()=>{\n//     return(<DropDown />)\n// }\n// ReactDOM.render(React.createElement(App),document.getElementById('root'));\n\n\n//general drop down list\nconst useDropDown=(label,defaultState,options)=>{\n    const [state,updateState]=useState(defaultState);\n    // const state=defaultState;/\n    const id=`use-dropdown-${label.replace(\" \",'').toLowerCase()}`;\n    // console.log(options);\n    const DropDown=()=>(\n        <label htmlFor={id}>\n            {label}\n            <select \n            id={id}\n            value={state}\n            onChange={e=>updateState(e.target.value)}\n            >\n                <option >All</option>\n                {\n                    options.map(op=>(\n                        <option value={op} key={op}>{op}</option>\n                    ))\n                }\n            </select>\n        </label>\n    );\n    return [state,DropDown];\n}\nexport default useDropDown;","import React from \"react\";\nimport {Link} from '@reach/router'\nconst Pet = props => {\n  const { name, animal, breed, media, location, id } = props;\n  //default photo of a dog\n  let hero = \"http://placecorgi.com/300/300\";\n  if (media.length) {\n    hero = media[0].small;\n  }\n  return (\n    //onclick to this link it will go to this page\n    <Link to={`/detail/${id}`} className=\"pet\">\n      <div className=\"image-container\">\n        <img src={hero} alt={name} />\n      </div>\n      <div className=\"info\">\n        <h1>{name}</h1>\n        <h2>{`${animal} — ${breed} — ${location}`}</h2>\n      </div>\n    </Link>\n  );\n};\nexport default Pet;","import React from 'react'\nimport Pet from './Pet'\nconst Result =({pets})=>{\n    return(\n        <div>\n            {\n                !pets.length?(<h1>No pets available</h1>):(\n                    pets.map(pet=>{\n                        return(\n                            <Pet \n                            animal={pet.type}\n                            key={pet.id}\n                            name={pet.name}\n                            breed={pet.breeds.primary}\n                            media={pet.photos}\n                            location={`${pet.contact.address.city}, ${\n                                pet.contact.address.state\n                              }`}\n                            id={pet.id}\n                            />\n                        )\n                    })\n                )\n            }\n        </div>\n    )        \n}\nexport default Result;","import React, { useEffect, useState } from \"react\";\nimport useDropDown from \"./useDropDown\";\nimport pet, { ANIMALS } from \"@frontendmasters/pet\";\nimport Result from \"./Result\";\n// pet.breeds(\"cat\").then(console.log,console.error);\nconst SearchParam = () => {\n  const [location, updateLocation] = useState(\"Seattle, WA\");\n  const [breeds, updateBreeds] = useState([]);\n  const [animal, AnimalDropDown] = useDropDown(\"Animal\", \"\", ANIMALS);\n  const [breed, BreedDropDown] = useDropDown(\"Breed\", \"\", breeds);\n  const [pets, setpets] = useState([]);\n  async function requestPets() {\n    const { animals } = await pet.animals({\n      location,\n      breed,\n      type: animal,\n    });\n    setpets(animals || []);\n    // console.log(animals);\n  }\n  // pet.animals(\"dog\").then(console.log,console.error);\n  //will work after loading of page every time(due to react) .Works as a delay\n  //second argument of useEffect is a list which tell to not re render if items of this list changes\n  //If not provided it will cause infinite re render cycle\n  useEffect(() => {\n    //removing any set breeds from list\n    updateBreeds([]);\n    pet.breeds(animal).then(({ breeds }) => {\n      if (breeds){\n        const breedString = breeds.map(({ name }) => name);\n        updateBreeds(breedString);\n      }\n    }, console.error);\n  }, [animal]);\n  // const [breed,BreedDropDown]=useDropDown(\"Breed\",animal)\n  return (\n    <div className='search-params'>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault(); //Do nothing on submit\n          requestPets();\n        }}\n      >\n        <label htmlFor=\"location\">Location</label>\n        <input\n          id=\"location\"\n          type=\"text\"\n          value={location}\n          onChange={(e) => updateLocation(e.target.value)}\n        />\n        <br />  \n        <AnimalDropDown />\n        <br />\n        <BreedDropDown />\n        <br />\n        <input type=\"submit\" />\n      </form>\n      <Result pets={pets} />\n    </div>\n  );\n};\nexport default SearchParam;\n","import React from 'react'\nclass Carousel extends React.Component{\n    state={\n        photo:[],\n        active:0\n    }    \n    static getDerivedStateFromProps({ media }){\n        //default photo\n        let photos = [\"http://placecorgi.com/600/600\"];\n        if(media.length){\n            photos=media.map(({large})=>large);\n        }\n        console.log(media);\n        return {photos};\n    }\n    render(){\n        const { photos, active } = this.state;\n        console.log(active);\n        return (\n        <div className=\"carousel\">\n            <img src={photos[active]} alt=\"animal\" />\n            <div className=\"carousel-smaller\">\n            {photos.map((photo, index) => (\n                <img\n                key={photo}\n                src={photo}\n                className={index === active ? \"active\" : \"\"}\n                alt=\"animal thumbnail\"\n                onClick={this.handleIndexClick}\n                data-index={index}\n                />\n            ))}\n            </div>\n        </div>\n        );\n    }\n    // add event listener\n    handleIndexClick = event => {\n        this.setState({\n        active: event.target.dataset.index\n        });\n    };\n}\n\n\n\n\n  \nexport default Carousel;","import React from 'react'\nimport pet from '@frontendmasters/pet'\nimport Carousel from './Carousel'\nclass Details extends React.Component{\n    constructor(){\n        super();\n        //A variable of class is made as state which is a object\n        this.state={loading:true};\n    }\n    componentDidMount(){\n        pet\n            .animal(+this.props.id)\n            .then(({animal})=>{\n                this.setState({\n                    name:animal.name,\n                    animal:animal.type,\n                    location:`${animal.contact.address.city}, ${\n                        animal.contact.address.state\n                    }`,\n                    description: animal.description,\n                    media: animal.photos,\n                    breed: animal.breeds.primary,\n                    loading: false\n            });\n            })\n            .catch(err =>this.setState({error:err}));\n    }\n    render(){\n        if (this.state.loading) {\n            return <h1>loading … </h1>;\n        }\n        const { animal, breed, location, description, media, name } = this.state;\n        console.log(media);\n        return (\n          <div className=\"details\">\n            <div>\n              <h1>{name}</h1>\n              <h2>{`${animal} — ${breed} — ${location}`}</h2>\n              <Carousel media={ media }/>\n              <button>Adopt {name}</button>\n              <p>{description}</p>\n            </div>\n          </div>\n        );\n    }\n}\nexport default Details;","import React from 'react'\nimport SearchParam from './searchParams'\nimport Details from './Details'\nimport {Router } from '@reach/router'\nimport './App.css';\n\nfunction App() {\n  return (\n        <Router>\n            <SearchParam path=\"adopt_me/\" />\n            <Details path='detail/:id' />\n        </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap-social/bootstrap-social.css'\nimport 'font-awesome/css/font-awesome.min.css'\n\nimport './index.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}